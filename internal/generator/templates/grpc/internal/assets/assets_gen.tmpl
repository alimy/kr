// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../assets/certs/server.key (1.678kB)
// ../../assets/certs/server.pem (1.115kB)
// ../../assets/config/app.toml (697B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _certsServerKey = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\x37\x12\xab\x5a\x16\x85\xe1\x9c\x51\xdc\x9c\xea\x02\x01\x12\x10\xbc\xe0\x60\x84\xf7\x07\xa7\x0c\xef\x41\x38\x61\x46\xdf\xf5\x6e\xa7\xbd\xd3\x9d\x7c\xb5\x92\xff\x3f\xff\x1e\x27\x4a\x8a\xf9\xc7\xf5\xc0\x1f\xdb\x55\x02\x00\xc5\x3f\x9a\x18\xff\xfd\x20\x86\xa2\x88\x5f\xa0\x70\x00\x68\x3c\x70\x44\x80\x97\xe8\x72\xfe\x2a\xd4\xc6\xe2\x53\x65\xdd\xb1\xa5\x66\xfb\xfa\x16\xe7\x52\xb0\x16\x38\xe4\x32\x56\x4a\x61\xe3\x0e\xbb\x2c\x3d\xb3\x1e\x12\x15\x49\x5e\xca\xa2\x0e\xb6\x00\xca\xa5\x93\x06\xb0\x33\x22\xfa\x10\x55\xc3\xad\x0a\xda\xa5\xda\x15\xbd\xe8\xbe\xc5\xc6\xd3\x83\xb2\x13\x52\xcd\x19\x85\xb1\x99\xc8\x4b\xc4\x31\x90\xd8\x2e\x34\x0f\x11\x02\xa2\x1b\x0c\x93\x6a\xe3\xba\x2a\xff\xcc\x3c\xba\x91\xa0\x9f\xdc\x4d\x50\x39\xe5\xad\x45\x59\xfe\xba\x64\xc0\xce\xec\xaf\xc5\x34\x77\x1b\x93\x12\xda\xad\x10\x0b\xe8\x40\x4d\xa9\xfb\xfc\xd5\x48\xf7\x8e\x87\xe7\xa4\xaa\x93\xde\x65\xfb\x87\xa9\xa5\x85\x34\xf2\x5b\x7e\x1b\x8a\x6d\xa9\x4f\x6e\x78\xc6\x5c\x4c\xde\x14\xd4\x67\x69\x1c\x84\xb9\xd6\xc9\xef\x6c\xca\x21\x7e\xca\x36\x7d\x48\xa2\x8a\x58\x30\xe9\x15\x8c\xb4\x66\x77\xab\x41\xa7\xeb\xc6\xe1\xf3\xb2\x93\x7d\xf5\xed\xd1\x12\x2d\x4c\x93\xdf\x94\xfb\xde\x42\x35\xa9\x19\xc1\xf1\xa9\x3f\xae\xd1\x95\xb6\xe9\x4e\x89\x46\x44\xa9\xf4\x83\xf4\xae\xf3\x99\x5c\xdc\x21\x89\xe8\xb4\x1d\xf4\xd7\x69\x5b\xb2\x55\x91\x47\x8b\xaf\xab\x99\xb1\x9f\x9f\x31\x4c\xed\x28\x02\x70\x00\x07\x26\x85\x03\xa2\x29\xef\xf4\x99\xcc\x03\xa3\x2e\x8a\xa3\x23\x50\x4c\xee\x97\x83\x69\x25\x17\x5e\xec\x2f\x79\xaf\x35\x1f\xc2\x15\xe0\x87\x4f\x76\x25\xcc\xa1\xa3\xcb\x53\x58\x43\x75\x7c\x62\xee\x79\xf9\x95\x9e\x0d\x44\xca\xe6\x53\x7f\xaa\x05\x3b\x85\x1f\x84\x7c\xed\xe9\xea\x2c\xd2\x01\xcc\x78\xee\xc0\x2b\xfa\x52\xbc\x29\x9d\xdd\xc7\x2f\x66\x43\x08\x45\x92\x7d\x4f\x78\x5f\xa7\x7c\x8d\xa9\x99\x3b\x66\x2b\x77\x3c\xf1\x6c\x1d\xbb\xf7\x15\x49\x81\xb0\x22\xe6\xce\xae\x73\x2b\xe2\xcc\x56\x5c\xb0\xcf\x43\x7c\x4f\x0c\xad\x95\xe2\x98\xfc\x8e\xe6\x72\x12\x13\xb5\xb4\x3c\x85\xdf\x7b\xb7\x27\x9a\x7a\x12\x99\x2f\xd2\xfd\x80\x3f\xfb\x25\x36\x4f\x3f\x84\xc8\x60\x02\x94\xbb\x24\xa6\x4b\x34\x3a\xd7\x71\xb2\x84\x4c\xc5\xce\x4d\x9d\x2e\x26\x4c\xa1\xc4\xe8\xfc\x8b\x2b\x17\x06\xf6\x18\x6a\x83\x06\xdd\xf7\xdc\x59\x61\x48\x0e\x04\x8a\x0f\x11\x67\xb9\x48\x63\xd3\x2e\xd6\xe2\xb6\x18\xec\x42\x1b\xb8\x5e\x98\x05\x8f\x29\x92\xb1\x88\x0b\xc2\xe9\xf6\x3f\x15\x67\x9e\x30\x0f\x1f\x81\x70\xd9\x3e\x2d\xeb\x06\x8b\xd3\xf7\xad\x1b\x1f\x37\x50\x72\xf4\x79\x20\x98\x7c\xde\x18\x8d\xf3\x55\x2c\x02\xbc\x16\x3e\x00\x8f\x61\x9f\x1c\xc2\xe5\xcd\xce\xb2\xe4\x57\xe1\xe5\x98\x15\x42\x8b\x2a\xd3\x7d\x7e\xee\x42\x60\x13\xc1\x51\x19\x98\xe6\xe8\xeb\xc2\x9a\x38\xe2\x25\x54\xc5\x70\x57\x51\x44\xb9\x65\x6b\xf0\xf4\x00\x95\x60\x80\x8f\xf6\x51\x73\x12\xc9\xf3\x5a\xe8\x3b\xac\x8e\x3f\x54\x7a\x74\x1c\x9a\x20\xd5\x86\x8e\x7d\x14\xff\x1a\xa4\x2e\xa1\xb8\x94\x20\xb6\x14\x9e\xc7\x00\x03\x03\x8b\x32\x8b\xaf\xad\xfc\x87\xef\x8c\xfc\x1c\x3c\xf5\x78\x50\x3e\x38\xee\xb4\xda\x5d\x19\xf3\x0e\xfa\x82\xfc\x27\x8f\x5a\x91\x36\xf8\x7c\xfd\x2b\xc6\xd0\xd5\x45\xec\xd0\xff\xda\xee\xc5\xf7\x8a\x25\x10\x78\x51\x50\x04\xc1\x37\x29\x83\xf9\xdb\xf9\x7a\x2f\xe2\xe8\x6b\xf1\xe8\x35\x2c\x5e\xf3\x64\xae\xcc\x0f\xd8\xa0\x26\x90\x67\xb8\x75\x6f\x25\xc8\x24\x52\x46\xec\x3b\x9b\x52\xf1\xbd\xb6\x41\x2e\xba\x71\x46\x3b\x52\x2d\x76\xa7\x1a\x33\x54\x40\x8f\x7b\x2f\xed\xa5\xbe\xbf\xf1\x8e\x3d\x70\x61\x33\xd0\xac\xbf\x75\xcf\xa5\xdb\x58\xf3\x72\x2b\x6f\x14\x35\x41\x7c\xf2\xee\xc7\x1d\x6c\x8f\x23\x77\x75\x09\x4e\x05\xff\x62\xeb\xe7\x5b\x23\xf1\x4f\xe7\x90\xc9\x99\x74\x47\xd9\xb9\xcc\x5f\xf2\x20\xae\xd5\x50\x60\x98\x64\xbe\xbe\x33\xd6\xbb\x5c\x38\x92\x08\x73\x00\xd0\x50\x5a\x6a\xf7\x01\xd8\xc3\x8c\xca\x16\x3e\x79\x9f\xeb\xa3\x68\xf0\x7e\x0c\x58\x99\x1f\x4b\xff\xf3\xc0\x14\x47\x0f\x6d\xa5\xfa\x58\xaf\x5f\x1e\xb2\x7b\x0c\xa5\xbe\x2a\x8a\x17\x1f\x22\xf1\xb1\x25\xb4\xe6\x40\x62\x88\x17\x4d\x7c\x6f\xc5\x0b\x1c\x2b\x8d\x45\x07\x16\x6d\xe9\x57\xec\xa4\x84\x65\x5a\xb8\x61\xd2\x38\x94\xc3\xd3\x08\x4c\xe6\xce\x52\xec\x6a\x0b\x3b\xb5\x03\x6f\xdf\x90\xbc\x29\xc2\xf0\x29\xe0\x0a\x19\x17\x25\xcd\x27\xdc\x49\xbe\x53\xff\x7f\x2b\xd7\x1d\xcb\xba\x59\x02\x4e\x0f\x56\x01\x9e\x6b\x65\xf0\xbb\x5c\xd5\xee\x97\xcf\xd6\xd5\xd1\x23\xbc\x4a\xc0\x21\xa3\xc7\x48\x59\x16\x89\xef\x3c\x9d\xcc\x6d\x0c\xcb\xda\xff\x39\x73\x44\x04\x20\x3d\x22\xaa\x32\x2f\xf3\xb2\x9e\xe4\xe8\x0d\x29\xeb\x81\x3e\x67\x7f\x5d\xf3\x5a\x34\xf1\x91\xa1\x02\xed\x5e\xae\x83\xdc\x5e\x8d\xe3\x3d\xa9\x61\x8f\x47\x47\x71\x85\x43\x82\x60\x6d\x3d\xf3\x9b\x5b\x96\x79\xed\x11\xb1\xb1\x75\xf0\x1b\x0d\x68\x31\xb1\xe2\x3b\xac\x52\x76\xda\xd9\xbe\xac\xdd\x58\x29\x61\xfd\x71\x5f\x44\xee\x76\xc1\x4b\xfe\x25\x03\xd5\xd0\x54\x5d\xb8\x03\x59\x0c\xe0\xd4\x39\x4a\x5c\x15\xcc\x47\xa3\x30\xb8\xa5\x02\x6a\xc9\xdb\x83\x7e\x39\x64\x16\x9a\xa9\x2b\x39\xf6\xaa\x8f\x43\x38\x03\x02\x61\x8f\xed\x67\x35\x4d\x6f\xd8\x76\x6d\xf8\x99\xa2\x0a\xdd\xde\xb8\x1d\x23\x16\x04\x1c\x31\xae\x8c\x9f\xe8\x1a\x24\x58\xd6\x1c\x32\xaa\xff\x42\x4b\x65\x25\x9f\x90\xf9\x37\xbc\xd6\xea\xc6\x73\x11\x19\x25\xd5\xd8\xf8\x7b\xcb\x33\x42\x98\xcf\xe9\x9d\x71\xb0\x0e\xe0\xf0\x61\xde\x6c\xa4\xb8\x03\xa7\x9f\x43\x26\xf7\x7e\xdc\x1e\x07\xf4\xbe\x78\x38\x51\xdf\xef\x01\xfe\xf9\x07\xf9\x9b\x15\xd1\x14\xfe\x6f\x6e\xfe\x1b\x00\x00\xff\xff\xd6\x2f\x54\x00\x8e\x06\x00\x00"

func certsServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_certsServerKey,
		"certs/server.key",
	)
}

func certsServerKey() (*asset, error) {
	bytes, err := certsServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "certs/server.key", size: 1678, mode: os.FileMode(0644), modTime: time.Unix(1575747298, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x53, 0xf2, 0x28, 0x1f, 0x6b, 0xb5, 0xcd, 0x3, 0xb, 0xc, 0x5d, 0xd7, 0x20, 0x8e, 0x3d, 0x29, 0x99, 0xcb, 0xbb, 0xd, 0x98, 0x1c, 0xe1, 0x2e, 0xcf, 0xa, 0xfd, 0xe4, 0x4a, 0xba, 0x29, 0x99}}
	return a, nil
}

var _certsServerPem = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x94\x39\xd3\xba\x48\x10\xc6\x73\x3e\xc5\xe6\xd4\x96\xa2\xa8\x18\x6c\xd0\xc3\x8c\x30\x1c\x23\x03\x28\x47\x06\x2a\x97\x07\x82\xc8\xf5\xe9\xb7\xde\x77\xc3\x7f\xed\x13\x74\xd0\x5d\xf5\xeb\x7a\x92\xdf\xdf\x3f\x41\x44\xa3\xec\x2f\x95\xb8\x3e\x3d\x50\x15\x7c\xf2\xbb\x15\x6c\x4a\xb1\x5a\xa9\x2a\x64\x66\x0e\x03\x45\x90\x53\x4e\x2b\x19\x7d\x8f\x1d\x77\x83\xb1\x3f\x81\xac\x9e\x12\x4b\x0c\x2a\x60\x28\xbf\x37\xc5\xbd\xd4\xf6\xc3\x12\x01\xff\x1c\x00\x83\x27\xd8\x2e\x0c\x38\x8f\xf0\x99\x73\x93\x0c\x57\x14\xad\xa4\x07\x25\xac\xb7\x55\x08\xb1\x4f\x64\x1b\xd3\xc9\xae\xc8\xcc\x30\x48\xec\x50\x47\x78\xa6\xa3\x3d\xd3\xc1\x9e\xe9\x6c\xe3\xd3\x52\xf8\x19\x41\x05\xde\xff\x82\x28\x45\xf4\x8f\xef\xe4\x00\x70\x54\x81\x2b\xf0\x53\x01\xa9\xb9\xa9\x02\x27\xb0\xcc\xc4\x76\xec\x73\xd1\x59\x44\xa3\xb1\x77\x5f\x95\xdc\x38\xd3\xfb\x36\xb6\xb7\xfd\x11\x06\x3d\x8b\x68\x86\x3b\x34\x38\x59\xe6\xb1\xe2\x99\x18\xc9\x96\xb6\x82\xf1\x74\x30\x64\xed\x5d\x7b\xc2\x57\x21\xa2\x44\x0c\xdb\xcd\x6f\x3b\x57\xae\x3e\xe2\xb4\x7b\x54\x8b\xd7\xe8\xf9\x3a\x0f\xe4\x72\x0c\x83\x88\x25\x7a\x1b\x22\xc5\x5f\x75\x93\x78\x0d\x56\xbe\xd8\x09\x7e\x90\xe4\x1d\xba\xe7\xd7\xb8\x51\xc5\x6e\x0d\x8f\xda\xed\xb0\x81\xe8\xc1\x0c\x2f\xd7\xed\xa4\xc3\xbe\xd9\xf7\xd5\xc2\x74\xbb\x57\x92\xf9\x4e\x85\x23\x2c\x3e\xe5\x3a\x75\x37\x7d\x71\x3f\x44\x4f\x61\x53\x1b\x46\x6d\xdd\x2f\xdf\x58\x29\xb4\x76\x6d\x5f\x67\xfd\x60\x53\xe7\x68\x6c\xd0\x73\x13\xa1\x68\x3d\xcb\xbe\xd5\x68\xaf\x27\x6e\x0a\x6b\xfd\x6e\x98\x1e\x2c\x47\xdd\xd9\x0d\x1a\x31\x8e\x7e\xf2\x10\xe8\x62\x7d\x6c\xdc\xae\x80\xbb\x65\xd9\xc3\x49\xd5\xf9\xe5\x6d\x75\x52\xb5\xaa\xfc\x34\xe9\xeb\xeb\xc9\x6b\xe5\x32\x65\xa1\xff\xda\x58\xd2\xf4\x72\xb5\xae\x9e\xd3\x55\x49\x44\x39\x8d\x1f\x2e\x8f\x85\xda\x5d\xf2\xf5\x2a\x1c\x1d\x2e\xf6\x77\xb3\x4b\xba\x3c\xf4\x76\x64\x3b\x95\xcd\xa2\x3f\x5d\x14\xa5\xe0\x14\x03\x07\x54\x4b\xf5\x10\x60\x38\xa2\x9c\x9d\x75\xae\x20\xc8\x14\x82\xc0\x56\x05\x68\xf8\x40\x86\x08\x9f\xdd\xe5\x03\xc1\x30\xa8\x79\x44\xcd\x21\x42\x88\x9f\x74\x18\xc8\x80\xff\xbb\xf9\xc0\xf5\x05\x82\xd3\x00\x03\x41\x8b\x19\xf2\x5f\x90\x4b\x88\xa0\xf9\x10\xe6\xf9\xe3\x93\xae\x58\x91\x6a\x45\x7f\x59\x7b\x3a\x82\x9f\xa8\x3a\xd2\x15\x00\x20\x03\xe6\x91\x61\xd6\x31\x2d\xfa\x0b\x03\x4e\x2c\xc4\x01\xe7\x39\x41\x60\xe4\xb5\x50\xb4\x96\x81\x4d\xb6\x3f\x87\xc5\x96\x84\x51\x97\xdc\xec\xd1\x3d\x13\xca\x3a\xf1\x33\xb4\xa1\x55\x8f\xec\xc2\x9e\x6e\x18\xa7\x9b\x3e\x94\xa4\x29\xdc\x7f\xf5\x40\xbd\xd0\xe4\xa8\xc7\xb6\x7c\xd9\x0a\x62\x1c\xdf\xb6\x79\x77\xf5\xb5\xcf\xd0\xce\x8f\x5d\x8f\x36\xae\xb1\x89\x0d\x32\xbd\xab\xa5\x5d\x40\xaf\x2f\x1c\xb6\x34\xf6\xc1\x32\x0f\xa3\x74\x9c\xa9\xb2\xde\xbb\x7c\x85\x1b\x16\xe2\xea\xb4\xa3\x42\x4a\xf0\xc3\x44\x9e\xf7\x3c\xa4\x4b\xbf\x0a\xfd\x6f\x58\xe8\xe6\xd4\x97\x16\xf1\x21\xcd\x24\x79\x1d\xa7\x3b\x5b\x2a\xf7\x96\x78\xda\x64\xa5\x93\x34\xab\xb8\x5b\xee\x58\xb8\xbd\xae\xbc\xe8\x66\x5f\x85\xdd\xf7\x1a\x4e\xfd\x22\x28\x82\x2c\x34\xa3\x6a\xa5\xd7\x89\xf2\x31\xb3\x0b\x6b\x57\xb7\xad\x42\xef\x29\xde\x96\x52\xb5\x9f\x43\x2f\x3d\xda\x59\xff\x91\x8c\x38\x6f\x27\xad\x61\xb4\xd6\xf0\xd1\x99\x05\xd1\x5e\xf3\xa2\xef\xbf\x65\x64\xa8\x5e\x7d\x2c\xf0\xbb\x58\xbe\x59\x7d\xbe\xe9\x32\xeb\x92\xf3\xd0\x38\xb7\x5d\x63\x3b\xaf\xf2\x29\x49\xaa\xc6\xbd\xac\x9a\xc7\x67\x6c\x1f\x9a\x4f\x6d\xd0\x8f\x7b\x13\x1e\x65\xbe\xf8\xa6\xcc\x88\x53\x75\x5b\x83\x14\x8a\x9d\xfc\x8f\xf0\xab\x0a\xc2\xf0\x9f\xfa\xf8\x37\x00\x00\xff\xff\x60\x6c\x81\xfa\x5b\x04\x00\x00"

func certsServerPemBytes() ([]byte, error) {
	return bindataRead(
		_certsServerPem,
		"certs/server.pem",
	)
}

func certsServerPem() (*asset, error) {
	bytes, err := certsServerPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "certs/server.pem", size: 1115, mode: os.FileMode(0644), modTime: time.Unix(1575747298, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x40, 0x16, 0xb3, 0x9d, 0x18, 0xc2, 0x9e, 0xb, 0x25, 0x8d, 0x38, 0x53, 0x2c, 0x69, 0xb, 0xd5, 0x81, 0xa5, 0xfd, 0xdc, 0xbb, 0x27, 0x1e, 0xbf, 0x2c, 0xd8, 0xff, 0x67, 0xb0, 0xb8, 0x43, 0x89}}
	return a, nil
}

var _configAppToml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4b\x8b\xdb\x30\x10\xc7\xef\xfa\x14\x83\x72\xae\x91\x93\x3e\xa0\xd4\xa5\xed\xad\xb0\x7b\x5b\xd8\x83\x09\x46\xb6\xc6\xf6\x10\x3d\x8c\x24\xc7\x9b\x7c\xfa\x45\x8e\xf3\x60\x49\x58\x9f\x3c\xff\xf1\xef\x67\x89\x99\x52\x0e\x83\xa6\x46\x46\x72\x76\xcb\xac\x34\x08\x05\xf0\x23\x99\x2f\x21\x70\xb6\x47\x1f\xc8\xd9\x14\x89\x2c\xcf\x04\x67\x72\x8c\xbd\xf3\x01\x0a\x28\xf9\x33\x35\xbd\x44\x0d\x4f\x04\xbf\xa4\x26\x73\xf8\xd3\x91\xa6\x78\xc8\x2c\xc6\xdf\x7c\xcb\x14\x86\xc6\xd3\x10\x17\xc3\x91\x0c\x04\xb2\x9d\x46\x08\xe8\xf7\xe8\x39\x63\x2b\xf8\x6f\xfe\x76\x68\x23\xb4\xce\x43\x70\xcd\x0e\x23\x2b\x65\x4a\xb6\x4c\x2a\xe5\x13\x98\xaf\x7f\x64\x22\x13\x59\xce\xd9\xe0\x7c\x84\x02\x36\x42\x88\x8f\xf0\x84\x75\x70\x57\xbc\x9a\xb0\xfe\x44\x91\xdf\x2a\x5e\xa5\x57\x01\x1a\x67\x5b\xea\x2e\x8a\x94\xdd\x91\xfc\xdc\x08\xb1\x5e\x4e\xff\x42\xd1\x69\xba\x80\x64\xaa\x38\x27\x0f\xb0\xcd\x82\xfd\xa3\x00\x64\x23\x7a\x2b\x35\x48\x65\xc8\xb2\xf2\x5c\x57\x73\xfd\x40\xf0\xf5\x46\x80\x6f\x67\x41\xdb\x4a\xf2\x81\x95\xe7\xa4\x5a\x92\x07\x92\x6f\x9c\x4d\x58\x57\x77\x7b\xdf\xe7\x1f\x9c\xee\x03\x64\x41\xe1\x1e\xb5\x1b\x58\xb9\xbc\xa4\xb9\xd6\x63\x07\x05\xb4\x52\x07\x84\xeb\xb3\x82\xa9\xc7\xd8\xa3\x4f\xf3\x68\xf0\x04\xa7\x4f\x8d\x53\xc8\xd4\x54\x19\x8c\x9e\x9a\x50\xb5\x72\x97\xd6\x2c\xfa\x11\x6f\xa9\x31\x20\xcc\x2d\x32\x83\x46\x83\x36\xce\x6b\x09\xae\x85\x2b\x9c\x64\xa3\x46\xf6\x1e\x00\x00\xff\xff\x75\x46\x97\x4d\xb9\x02\x00\x00"

func configAppTomlBytes() ([]byte, error) {
	return bindataRead(
		_configAppToml,
		"config/app.toml",
	)
}

func configAppToml() (*asset, error) {
	bytes, err := configAppTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/app.toml", size: 697, mode: os.FileMode(0644), modTime: time.Unix(1583307702, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0x54, 0x7b, 0xff, 0x7a, 0x3b, 0x8c, 0xeb, 0x88, 0xd9, 0x8e, 0xc8, 0x88, 0xe2, 0xcb, 0x92, 0xc0, 0x8f, 0xe4, 0x6d, 0x92, 0x2, 0x17, 0x51, 0xa, 0x2f, 0x70, 0xc0, 0x43, 0xe0, 0x9b, 0xbe}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"certs/server.key": certsServerKey,
	"certs/server.pem": certsServerPem,
	"config/app.toml":  configAppToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"certs": {nil, map[string]*bintree{
		"server.key": {certsServerKey, map[string]*bintree{}},
		"server.pem": {certsServerPem, map[string]*bintree{}},
	}},
	"config": {nil, map[string]*bintree{
		"app.toml": {configAppToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
