package insecure

import (
	"crypto/tls"
	"crypto/x509"
	"io/ioutil"

	"{{.PkgName}}/internal/assets"
	"github.com/sirupsen/logrus"
	"golang.org/x/net/http2"
)

var (
	// Cert is a self signed certificate
	Cert tls.Certificate
	// CertPool contains the self signed certificate
	CertPool *x509.CertPool
)

func init() {
	var err error
	certPEM, _ := assets.Asset("certs/server.pem")
	keyPEM, _ := assets.Asset("certs/server.key")
	Cert, err = tls.X509KeyPair(certPEM, keyPEM)
	if err != nil {
		logrus.Fatalln("Failed to parse key pair:", err)
	}
	Cert.Leaf, err = x509.ParseCertificate(Cert.Certificate[0])
	if err != nil {
		logrus.Fatalln("Failed to parse certificate:", err)
	}
	CertPool = x509.NewCertPool()
	CertPool.AddCert(Cert.Leaf)
}

// GetTLSConfig get tls config from certPemPath/certKeyPath
func GetTLSConfig(certPemPath, certKeyPath string) *tls.Config {
	var certKeyPair *tls.Certificate
	cert, _ := ioutil.ReadFile(certPemPath)
	key, _ := ioutil.ReadFile(certKeyPath)
	pair, err := tls.X509KeyPair(cert, key)
	if err != nil {
		logrus.Printf("tls KeyPair err: %v", err)
		return nil
	}
	certKeyPair = &pair
	return &tls.Config{
		Certificates: []tls.Certificate{*certKeyPair},
		NextProtos:   []string{http2.NextProtoTLS},
	}
}
